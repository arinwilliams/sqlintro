Hint: So that you can understand the schema, you may want to just do a simple select statement on each
table.  For example, to see the schema for the Products table, you could do:

SELECT * FROM Products LIMIT 5;

1. Use an SQL SELECT statement to retrieve the first 10 rows of the Customer table, ordered by CustomerName.
Paste your SQL statement below:
SELECT CustomerName FROM Customers ORDER BY CustomerName Asc LIMIT 10;


2. Use an SQL Select statement to retrieve the names and prices for all products that cost less than $20.
Paste your SQL statement below:
SELECT ProductName, Price FROM Products WHERE Price < 20;

3. Retrieve all employees whose last name starts with C.  Paste your SQL statement below:
SELECT FirstName, LastName FROM Employees WHERE LastName LIKE "C%";

4. Retrieve the order ID and customer name for all orders where the customer name starts with A.
Here you will have to do a join of the Orders table and the Customers table.  Paste your SQL
statement below.
SELECT o.OrderID, c.CustomerName FROM Orders o INNER JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.CustomerName LIKE "A%";

5. Retrieve the list of customers, ordered by customer name, along with their order IDs.  Note
that not every customer has an order, but be sure that you include those customers without orders
in the results of the query.  Paste your SQL statement below.

SELECT c.CustomerName, o.OrderID FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID ORDER BY c.CustomerName;

6. Retrieve the list of customer names for customers that have no orders.  There are two ways to do this
One is to use a subquery, as follows:

SELECT CustomerName FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM ORDERS);

This is a subquery -- we haven't talked about those.  But, you can do the same thing with a left
join by comparing the OrderID column with NULL.  Paste your SQL statement below.

SELECT c.CustomerName, o.OrderID FROM Customers AS c LEFT JOIN Orders AS o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL ORDER BY c.CustomerName;

7. Retrieve the OrderID and ProductName of every order for a product with Tofu in the name.
Paste your SQL statement below.  You will have to join Orders, OrderDetails, and Products.

SELECT o.OrderID, p.ProductNameFROM Orders INNER JOIN OrderDetails od ON o.OrderID = od.OrderID INNER JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName LIKE '%Tofu%'ORDER BY o.OrderID;

Whatâ€™s your rule of thumb for when to ask for help?
My rule of thumb is to try reworking my solution for about twenty minutes. After that, I'll search online for help. Sometimes Stackoverflow is useful.
Sometimes other platforms will have answers. But I want to make my very best effort before asking anyone, like a mentor, to help.
When is an instance where you wish you would have asked for help sooner?
During my intro to programming class, I struggled for several days with a couple of questions on an early lesson. The material seemed
foregin. Yet, I banged my head against a wall trying to solve it. However, if I had asked for help earlier, I would have found out that it was indeed new material that we had not covered.
The instructors went above and beyond in trying to explain it. But I wasted hours of time and frustration just because I was to embarrassed to say what everyone 
else was already thinking.

What information have you found crucial to include in your questions so that mentors or peers can help answer your questions quicker?
When asking for help, I try to provide as many key details as possible while staying brief. Screenshots have proven to be particularly helpful.
However, the most important thing is communicating context. How did the problem come up? What else was happening? What ultimately was I trying to do?
In some instances, I've been able to provide links to my work or through Replit or GitHub. Those have also been helpful. I've also learned that
providing too many details can cause people to check out or become disinterested before they even start to provide help. People don't want to be stuck
on the problem of trying to understand a problem. They want to spend their time working on solutions to the most relevant problems.